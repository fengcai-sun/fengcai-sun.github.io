<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>静心明志 on 静心明志</title>
    <link>https://fengcai-sun.github.io/</link>
    <description>Recent content in 静心明志 on 静心明志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 May 2019 17:45:45 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>198.打家劫舍</title>
      <link>https://fengcai-sun.github.io/2019/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</link>
      <pubDate>Thu, 09 May 2019 17:45:45 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</guid>
      <description>&lt;p&gt;你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，&lt;strong&gt;如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;给定一个代表每个房屋存放金额的非负整数数组，计算你&lt;strong&gt;在不触动警报装置的情况下，&lt;/strong&gt;能够偷窃到的最高金额。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;输入: [2,7,9,3,1]
输出: 12
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;代码：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static int rob(int[] nums) {
        int length = nums.length;
        if(length == 0)
            return 0;
        int before=0, now=0, temp=0;
        for(int i=0; i&amp;lt;length; i++){
            if(i==0)
                now = nums[0];
            else if(i==1){
                before = now;
                now = Math.max(nums[0], nums[1]);
            }
            else if(i&amp;gt;=2){
                temp = Math.max(before+nums[i], now);
                before = now;
                now = temp;
            }
        }
        return now;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>11.盛最多水的容器</title>
      <link>https://fengcai-sun.github.io/2019/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Thu, 09 May 2019 16:57:00 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>&lt;p&gt;给定 &lt;em&gt;n&lt;/em&gt; 个非负整数 *a*1，*a*2，&amp;hellip;，*a*n，每个数代表坐标中的一个点 (&lt;em&gt;i&lt;/em&gt;, &lt;em&gt;ai&lt;/em&gt;) 。在坐标内画 &lt;em&gt;n&lt;/em&gt; 条垂直线，垂直线 &lt;em&gt;i&lt;/em&gt; 的两个端点分别为 (&lt;em&gt;i&lt;/em&gt;, &lt;em&gt;ai&lt;/em&gt;) 和 (&lt;em&gt;i&lt;/em&gt;, 0)。找出其中的两条线，使得它们与 &lt;em&gt;x&lt;/em&gt; 轴共同构成的容器可以容纳最多的水。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;你不能倾斜容器，且 &lt;em&gt;n&lt;/em&gt; 的值至少为 2。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://fengcai-sun.github.io/images/blog/盛最多水的容器.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;输入: [1,8,6,2,5,4,8,3,7]
输出: 49
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;代码：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Solution {
    public int maxArea(int[] height) {
        int maxeara = 0;
        int i=0, j=height.length-1;
        while(i&amp;lt;j){
            maxeara = Math.max(maxeara, Math.min(height[i], height[j])*(j-i));
            if(height[i]&amp;gt;height[j]) j--;
            else i++;
        }
        return maxeara;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>跨域访问api</title>
      <link>https://fengcai-sun.github.io/2019/%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AEapi/</link>
      <pubDate>Wed, 08 May 2019 14:18:53 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AEapi/</guid>
      <description>

&lt;p&gt;主程序使用java构建了完整的算法，想快速通过简易前端实现效果可视化的时候产生了跨域访问失败问题，java部分api接口采用springboot快捷提供，前端采用python的flask快速开发。&lt;/p&gt;

&lt;p&gt;前端使用ajax访问其他web服务的后端接口时很容易出现因跨域访问而导致接口调用失败的问题，以下介绍如何使用CORS解决这两个框架的跨域访问问题。&lt;/p&gt;

&lt;p&gt;CORS是一种允许当前域（domain）的资源（比如html/js/web service）被其他域（domain）的脚本请求访问的机制，通常由于同域安全策略（the same-origin security policy）浏览器会禁止这种跨域请求。&lt;/p&gt;

&lt;p&gt;我们需要在两者分别修改代码实现跨域访问&lt;/p&gt;

&lt;h2 id=&#34;springboot框架解决方案&#34;&gt;SpringBoot框架解决方案&lt;/h2&gt;

&lt;p&gt;在Application类(启动类)里增加CorsFilter的Bean的定义：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.ecm;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

@SpringBootApplication
@MapperScan(&amp;quot;com.ecm.dao&amp;quot;)
public class EcmApplication {
    public static void main(String[] args) {
        SpringApplication.run(EcmApplication.class, args);
    }

    @Bean
    public CorsFilter corsFilter() {
        final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        final CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true); // 允许cookies跨域
        config.addAllowedOrigin(&amp;quot;*&amp;quot;);// #允许向该服务器提交请求的URI，*表示全部允许，在SpringMVC中，如果设成*，会自动转成当前请求头中的Origin
        config.addAllowedHeader(&amp;quot;*&amp;quot;);// #允许访问的头信息,*表示全部
        config.setMaxAge(18000L);// 预检请求的缓存时间（秒），即在这个时间段里，对于相同的跨域请求不会再预检了
        config.addAllowedMethod(&amp;quot;OPTIONS&amp;quot;);// 允许提交请求的方法，*表示全部允许
        config.addAllowedMethod(&amp;quot;HEAD&amp;quot;);
        config.addAllowedMethod(&amp;quot;GET&amp;quot;);// 允许Get的请求方法
        config.addAllowedMethod(&amp;quot;PUT&amp;quot;);
        config.addAllowedMethod(&amp;quot;POST&amp;quot;);
        config.addAllowedMethod(&amp;quot;DELETE&amp;quot;);
        config.addAllowedMethod(&amp;quot;PATCH&amp;quot;);
        source.registerCorsConfiguration(&amp;quot;/**&amp;quot;, config);
        return new CorsFilter(source);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flask框架解决方案&#34;&gt;Flask框架解决方案&lt;/h2&gt;

&lt;h3 id=&#34;安装flask-cors包&#34;&gt;安装flask_cors包&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pip install flask-cors&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;使用flask-cors包&#34;&gt;使用flask_cors包&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;-*- coding: utf-8 -*-
from flask import Flask
from flask_cors import *
app = Flask(__name__)
CORS(app, supports_credentials=True)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>js的ajax方式</title>
      <link>https://fengcai-sun.github.io/2019/js%E7%9A%84ajax%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 08 May 2019 14:01:43 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/js%E7%9A%84ajax%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;JS通过ajax调用接口实现数据传送，第一种方式为设置button的点击&lt;code&gt;onclick&lt;/code&gt;方法，第二种通过绑定&lt;code&gt;bind&lt;/code&gt;点击事件获得访问&lt;/p&gt;

&lt;p&gt;用&lt;code&gt;onclick&lt;/code&gt;方式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html; charset=UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
    &amp;lt;!-- src值为文件位置路径 --&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;UTF-8&amp;quot; src=&amp;quot;javascript/jquery-1.12.1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;title&amp;gt;测试案例&amp;lt;/title&amp;gt;
    &amp;lt;!-- 语法：jQuery.getJSON(url,data,success(data,status,xhr)) --&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
        function getToken(){
            $.getJSON(&amp;quot;http://localhost/kdapi/api/access_token&amp;quot;, {&amp;quot;id&amp;quot;:111,&amp;quot;secret&amp;quot;:2352532}, function(result){
                alert(result.access_token);
            });
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;button onclick=&amp;quot;getToken()&amp;quot; style=&amp;quot;width: 120px; height: 60px;&amp;quot;&amp;gt;获取Token&amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>方法超时放弃执行</title>
      <link>https://fengcai-sun.github.io/2019/%E6%96%B9%E6%B3%95%E8%B6%85%E6%97%B6%E6%94%BE%E5%BC%83%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Sun, 05 May 2019 16:58:24 +0800</pubDate>
      
      <guid>https://fengcai-sun.github.io/2019/%E6%96%B9%E6%B3%95%E8%B6%85%E6%97%B6%E6%94%BE%E5%BC%83%E6%89%A7%E8%A1%8C/</guid>
      <description>&lt;p&gt;遇到一个比较不常见的情况，我在流水线式执行一个方法，方法中涉及到数据的获取，有时候获取很快，有时候十几分钟都没结果，因为我这个任务要追求时间效率，可以牺牲小部分异常，所以想到方法超时放弃这个想法：如果这个方法执行超过60秒，就直接pass继续执行下一次。&lt;/p&gt;

&lt;p&gt;具体其实是应用线程去实现这个想法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;


import com.sun.corba.se.impl.orbutil.closure.Future;
import com.sun.corba.se.impl.orbutil.threadpool.TimeoutException;
public class ThreadTest {  
  
    public static void main(String[] args) throws InterruptedException,  
            ExecutionException {  
          
        final ExecutorService exec = Executors.newFixedThreadPool(1);  
          
        Callable&amp;lt;String&amp;gt; task = new Callable&amp;lt;String&amp;gt;() {  
            public String call() throws Exception {  
                //开始执行耗时操作  
                Thread.sleep(1000 * 5);  
                return &amp;quot;线程执行完成.&amp;quot;;  
            }  
        };  
          
        try {  
            Future&amp;lt;String&amp;gt; future = exec.submit(task);  
            String obj = future.get(1, TimeUnit.SECOND); //任务处理超时时间设为 1 秒  
            System.out.println(&amp;quot;任务成功返回:&amp;quot; + obj);  
        } catch (TimeoutException ex) {  
            System.out.println(&amp;quot;处理超时啦....&amp;quot;);  
            ex.printStackTrace();  
        } catch (Exception e) {  
            System.out.println(&amp;quot;处理失败.&amp;quot;);  
            e.printStackTrace();  
        }  
        // 关闭线程池  
        exec.shutdown();  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://fengcai-sun.github.io/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fengcai-sun.github.io/about/</guid>
      <description>&lt;p&gt;Hugo is the &lt;strong&gt;world’s fastest framework for building websites&lt;/strong&gt;. It is written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/russross/blackfriday&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/russross/blackfriday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/chroma&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/alecthomas/chroma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/muesli/smartcrop&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/muesli/smartcrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/spf13/viper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>